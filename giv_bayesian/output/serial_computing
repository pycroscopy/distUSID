qsub: waiting for job 413323.or-condo-pbs01 to start
qsub: job 413323.or-condo-pbs01 ready

No mpi4py found. Asssuming single node computation
Each rank is required to work on 68096 of the 68096 positions in this dataset
Rank 0 will read positions 0 to 68096 of 68096
Rank 0 - 1 processes with access to 122.48 GB memory on this socket
Allowed to read 65758263 pixels per chunk
Max positions per read set to 100
Consider calling test() to check results before calling compute() which computes on the entire dataset and writes back to the HDF5 file
ensuring that half steps should be odd, num_x_steps is now 250
Checking for duplicates:
Note: Bayesian_Inference has already been performed PARTIALLY with the same parameters. compute() will resuming computation in the last group below. To choose a different group call use_patial_computation()Set override to True to force fresh computation or resume from a data group besides the last in the list.
[<HDF5 group "/Measurement_000/Channel_000/Raw_Data-FFT_Filtering_000/Filtered_Data-Reshape_000/Reshaped_Data-Bayesian_Inference_000" (8 members)>]
Resuming computation in group: /Measurement_000/Channel_000/Raw_Data-FFT_Filtering_000/Filtered_Data-Reshape_000/Reshaped_Data-Bayesian_Inference_000
Each rank is required to work on 68096 of the 68096 positions in this dataset
Rank 0 will read positions 0 to 68096 of 68096
Resuming computation
You maybe able to abort this computation at any time and resume at a later time!
	If you are operating in a python console, press Ctrl+C or Cmd+C to abort
	If you are in a Jupyter notebook, click on "Kernel">>"Interrupt"
Rank 0 - Read positions 0 to 100. Need to read till 68096
Rank 0 beginning parallel compute for Forward
Number of CPU free cores set to: 2 given that the CPU has 36 logical cores.
1 cores requested.
computational jobs per core = 100. For short computations, each core must have at least 20 jobs to warrant parallel computation.
Rank 0 starting computing on 1 cores (requested 1 cores)
Rank 0 computing serially ...
Rank 0 finished processing forward sections. Now working on reverse sections....
Number of CPU free cores set to: 2 given that the CPU has 36 logical cores.
1 cores requested.
computational jobs per core = 100. For short computations, each core must have at least 20 jobs to warrant parallel computation.
Rank 0 starting computing on 1 cores (requested 1 cores)
Rank 0 computing serially ...
Rank 0 Finished processing reverse loops (and this chunk)
Rank 0 - computed chunk in 14.78 sec or 147.8 msec per pixel. Average: 0.1478 per pixel.
Rank 0 - Started accumulating results for this chunk
Rank 0 - Finished accumulating results. Writing results of chunk to h5
Rank 0 - Finished processing up to pixel 100 of 68096.
Rank 0 - wrote its 100 pixel chunk in 150.0 msec
Rank 0 - Time remaining: 2.82 hours
Rank 0 - Read positions 100 to 200. Need to read till 68096
Rank 0 beginning parallel compute for Forward
Number of CPU free cores set to: 2 given that the CPU has 36 logical cores.
1 cores requested.
computational jobs per core = 100. For short computations, each core must have at least 20 jobs to warrant parallel computation.
Rank 0 starting computing on 1 cores (requested 1 cores)
Rank 0 computing serially ...
Rank 0 finished processing forward sections. Now working on reverse sections....
Number of CPU free cores set to: 2 given that the CPU has 36 logical cores.
1 cores requested.
computational jobs per core = 100. For short computations, each core must have at least 20 jobs to warrant parallel computation.
Rank 0 starting computing on 1 cores (requested 1 cores)
Rank 0 computing serially ...
Rank 0 Finished processing reverse loops (and this chunk)
Rank 0 - computed chunk in 14.22 sec or 142.2 msec per pixel. Average: 0.145 per pixel.
Rank 0 - Started accumulating results for this chunk
Rank 0 - Finished accumulating results. Writing results of chunk to h5
Rank 0 - Finished processing up to pixel 200 of 68096.
Rank 0 - wrote its 100 pixel chunk in 10.0 msec
Rank 0 - Time remaining: 2.75 hours
Rank 0 - Read positions 200 to 300. Need to read till 68096
Rank 0 beginning parallel compute for Forward
Number of CPU free cores set to: 2 given that the CPU has 36 logical cores.
1 cores requested.
computational jobs per core = 100. For short computations, each core must have at least 20 jobs to warrant parallel computation.
Rank 0 starting computing on 1 cores (requested 1 cores)
Rank 0 computing serially ...
Rank 0 finished processing forward sections. Now working on reverse sections....
Number of CPU free cores set to: 2 given that the CPU has 36 logical cores.
1 cores requested.
computational jobs per core = 100. For short computations, each core must have at least 20 jobs to warrant parallel computation.
Rank 0 starting computing on 1 cores (requested 1 cores)
Rank 0 computing serially ...
Rank 0 Finished processing reverse loops (and this chunk)
Rank 0 - computed chunk in 14.2 sec or 142.0 msec per pixel. Average: 0.144 per pixel.
Rank 0 - Started accumulating results for this chunk
Rank 0 - Finished accumulating results. Writing results of chunk to h5
Rank 0 - Finished processing up to pixel 300 of 68096.
Rank 0 - wrote its 100 pixel chunk in 10.0 msec
Rank 0 - Time remaining: 2.72 hours
Rank 0 - Read positions 300 to 400. Need to read till 68096
Rank 0 beginning parallel compute for Forward
Number of CPU free cores set to: 2 given that the CPU has 36 logical cores.
1 cores requested.
computational jobs per core = 100. For short computations, each core must have at least 20 jobs to warrant parallel computation.
Rank 0 starting computing on 1 cores (requested 1 cores)
Rank 0 computing serially ...
Rank 0 finished processing forward sections. Now working on reverse sections....
Number of CPU free cores set to: 2 given that the CPU has 36 logical cores.
1 cores requested.
computational jobs per core = 100. For short computations, each core must have at least 20 jobs to warrant parallel computation.
Rank 0 starting computing on 1 cores (requested 1 cores)
Rank 0 computing serially ...
Rank 0 Finished processing reverse loops (and this chunk)
Rank 0 - computed chunk in 14.22 sec or 142.2 msec per pixel. Average: 0.14354999999999998 per pixel.
Rank 0 - Started accumulating results for this chunk
Rank 0 - Finished accumulating results. Writing results of chunk to h5
Rank 0 - Finished processing up to pixel 400 of 68096.
Rank 0 - wrote its 100 pixel chunk in 10.0 msec
Rank 0 - Time remaining: 2.71 hours
Rank 0 - Read positions 400 to 500. Need to read till 68096
Rank 0 beginning parallel compute for Forward
Number of CPU free cores set to: 2 given that the CPU has 36 logical cores.
1 cores requested.
computational jobs per core = 100. For short computations, each core must have at least 20 jobs to warrant parallel computation.
Rank 0 starting computing on 1 cores (requested 1 cores)
Rank 0 computing serially ...
Rank 0 finished processing forward sections. Now working on reverse sections....
Number of CPU free cores set to: 2 given that the CPU has 36 logical cores.
1 cores requested.
computational jobs per core = 100. For short computations, each core must have at least 20 jobs to warrant parallel computation.
Rank 0 starting computing on 1 cores (requested 1 cores)
Rank 0 computing serially ...
^C         9565103 function calls (9539856 primitive calls) in 70.821 seconds

   Ordered by: cumulative time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
   1625/1    0.066    0.000   70.920   70.920 {built-in method builtins.exec}
        1    0.000    0.000   70.920   70.920 bayesian_script_single_node.py:1(<module>)
        1    0.000    0.000   68.701   68.701 giv_bayesian_mpi.py:414(compute)
        1    0.000    0.000   68.701   68.701 mpi_process.py:451(compute)
        5    0.002    0.000   68.499   13.700 giv_bayesian_mpi.py:379(_unit_computation)
       10    0.000    0.000   68.496    6.850 mpi_process.py:565(parallel_compute)
       10    0.007    0.001   68.494    6.849 mpi_process.py:637(<listcomp>)
      956    6.810    0.007   68.487    0.072 giv_utils.py:17(do_bayesian_inference)
      956    0.026    0.000   42.373    0.044 _matfuncs_sqrtm.py:119(sqrtm)
      956   22.769    0.024   22.830    0.024 decomp_schur.py:20(schur)
      956   14.483    0.015   18.931    0.020 _matfuncs_sqrtm.py:26(_sqrtm_triu)
      956   10.622    0.011   10.622    0.011 {method 'randn' of 'mtrand.RandomState' objects}
    10516    6.794    0.001    6.794    0.001 {built-in method numpy.core.multiarray.dot}
  7292369    4.804    0.000    4.804    0.000 {method 'dot' of 'numpy.ndarray' objects}
       72    0.001    0.000    2.251    0.031 __init__.py:1(<module>)
   1847/2    0.010    0.000    1.905    0.953 <frozen importlib._bootstrap>:966(_find_and_load)
   1841/2    0.008    0.000    1.905    0.952 <frozen importlib._bootstrap>:936(_find_and_load_unlocked)
   1367/2    0.007    0.000    1.904    0.952 <frozen importlib._bootstrap>:651(_load_unlocked)
   1200/2    0.003    0.000    1.904    0.952 <frozen importlib._bootstrap_external>:672(exec_module)
   1860/2    0.001    0.000    1.902    0.951 <frozen importlib._bootstrap>:211(_call_with_frames_removed)
7051/1236    0.006    0.000    1.829    0.001 <frozen importlib._bootstrap>:997(_handle_fromlist)
   718/19    0.001    0.000    1.828    0.096 {built-in method builtins.__import__}
        6    0.000    0.000    1.405    0.234 __init__.py:10(<module>)
        1    0.000    0.000    1.391    1.391 giv_bayesian_mpi.py:7(<module>)
        1    0.000    0.000    1.353    1.353 __init__.py:18(<module>)
        1    0.000    0.000    0.900    0.900 usi_data.py:6(<module>)
      956    0.645    0.001    0.662    0.001 linalg.py:464(inv)
1363/1168    0.003    0.000    0.628    0.001 <frozen importlib._bootstrap>:564(module_from_spec)
  158/111    0.001    0.000    0.596    0.005 <frozen importlib._bootstrap_external>:919(create_module)
  158/111    0.362    0.002    0.596    0.005 {built-in method _imp.create_dynamic}
        1    0.000    0.000    0.511    0.511 __init__.py:13(<module>)
        2    0.000    0.000    0.453    0.226 image.py:5(<module>)
        2    0.000    0.000    0.441    0.220 __init__.py:19(<module>)
        1    0.000    0.000    0.440    0.440 jupyter_utils.py:4(<module>)
     1200    0.009    0.000    0.423    0.000 <frozen importlib._bootstrap_external>:743(get_code)
        1    0.000    0.000    0.407    0.407 plot_utils.py:6(<module>)
      956    0.009    0.000    0.405    0.000 defmatrix.py:66(matrix_power)
   239010    0.342    0.000    0.342    0.000 {built-in method builtins.round}
     1800    0.015    0.000    0.317    0.000 <frozen importlib._bootstrap>:870(_find_spec)
        2    0.000    0.000    0.309    0.155 __init__.py:6(<module>)
     1795    0.002    0.000    0.292    0.000 <frozen importlib._bootstrap_external>:1149(find_spec)
1796/1795    0.008    0.000    0.291    0.000 <frozen importlib._bootstrap_external>:1117(_get_spec)
        1    0.000    0.000    0.272    0.272 pyplot.py:19(<module>)
     2894    0.027    0.000    0.270    0.000 <frozen importlib._bootstrap_external>:1233(find_spec)
        1    0.000    0.000    0.250    0.250 embed.py:4(<module>)
    11490    0.227    0.000    0.227    0.000 {built-in method numpy.core.multiarray.zeros}
     1200    0.210    0.000    0.224    0.000 <frozen importlib._bootstrap_external>:830(get_data)
     8603    0.057    0.000    0.216    0.000 twodim_base.py:197(diag)
        1    0.000    0.000    0.210    0.210 __init__.py:106(<module>)
        3    0.000    0.000    0.207    0.069 __init__.py:57(<module>)
        1    0.000    0.000    0.199    0.199 _polygon.py:1(<module>)
3338/3274    0.061    0.000    0.199    0.000 {built-in method builtins.__build_class__}
        1    0.000    0.000    0.198    0.198 __init__.py:308(<module>)
     6425    0.188    0.000    0.188    0.000 {built-in method posix.stat}
     6119    0.003    0.000    0.187    0.000 <frozen importlib._bootstrap_external>:75(_path_stat)
        4    0.010    0.002    0.183    0.046 giv_bayesian_mpi.py:308(_write_results_chunk)
        1    0.000    0.000    0.178    0.178 giv_bayesian_mpi.py:127(__init__)
        1    0.000    0.000    0.178    0.178 add_newdocs.py:10(<module>)
      956    0.012    0.000    0.170    0.000 shape_base.py:844(tile)
        2    0.000    0.000    0.169    0.085 usi_data.py:26(__init__)
     1864    0.001    0.000    0.160    0.000 <frozen importlib._bootstrap_external>:94(_path_isfile)
     2025    0.003    0.000    0.160    0.000 <frozen importlib._bootstrap_external>:85(_path_is_mode_type)
     5363    0.159    0.000    0.159    0.000 {method 'reduce' of 'numpy.ufunc' objects}
     1200    0.003    0.000    0.153    0.000 <frozen importlib._bootstrap_external>:485(_compile_bytecode)
      956    0.150    0.000    0.150    0.000 {method 'repeat' of 'numpy.ndarray' objects}
        1    0.000    0.000    0.149    0.149 type_check.py:3(<module>)
     1200    0.146    0.000    0.146    0.000 {built-in method marshal.loads}
       17    0.141    0.008    0.144    0.008 dataset.py:526(__setitem__)
        3    0.000    0.000    0.141    0.047 __init__.py:4(<module>)
      955    0.005    0.000    0.134    0.000 fromnumeric.py:1778(sum)
      955    0.001    0.000    0.128    0.000 _methods.py:31(_sum)
        1    0.000    0.000    0.126    0.126 interactiveshell.py:1(<module>)
        1    0.000    0.000    0.123    0.123 _peak_finding.py:3(<module>)
        4    0.000    0.000    0.122    0.031 hdf_utils.py:1161(get_sort_order)
        4    0.001    0.000    0.122    0.031 hdf_utils.py:1183(<listcomp>)
        1    0.000    0.000    0.122    0.122 __init__.py:342(<module>)
        2    0.000    0.000    0.119    0.059 colorbar.py:20(<module>)
        1    0.000    0.000    0.117    0.117 apply_parallel.py:1(<module>)
        1    0.000    0.000    0.114    0.114 __init__.py:101(<module>)
        1    0.000    0.000    0.113    0.113 mpi_process.py:127(__init__)
        1    0.000    0.000    0.108    0.108 stats.py:156(<module>)
     2384    0.004    0.000    0.107    0.000 re.py:286(_compile)
        1    0.000    0.000    0.104    0.104 widget.py:8(<module>)
      385    0.000    0.000    0.103    0.000 re.py:231(compile)
      245    0.002    0.000    0.101    0.000 sre_compile.py:557(compile)
        1    0.000    0.000    0.092    0.092 distributions.py:8(<module>)
      974    0.009    0.000    0.084    0.000 _util.py:192(_asarray_validated)
     1930    0.061    0.000    0.081    0.000 function_base.py:1170(asarray_chkfinite)
      956    0.005    0.000    0.080    0.000 twodim_base.py:414(triu)
        1    0.000    0.000    0.077    0.077 _continuous_distns.py:5(<module>)
   242855    0.075    0.000    0.075    0.000 {built-in method builtins.max}
       98    0.002    0.000    0.072    0.001 _distn_infrastructure.py:1487(__init__)
       14    0.000    0.000    0.072    0.005 six.py:91(__get__)
       14    0.000    0.000    0.071    0.005 six.py:80(_import_module)
        2    0.000    0.000    0.070    0.035 manager.py:1(<module>)
        9    0.000    0.000    0.070    0.008 __init__.py:2(<module>)
        2    0.000    0.000    0.069    0.034 __init__.py:7(<module>)
